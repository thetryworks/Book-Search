{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\15019\\\\Book-Search\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\n\nexport function KnownDirectivesRule(context) {\n  var locationsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  var _iterator = _createForOfIteratorHelper(definedDirectives),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var directive = _step.value;\n      locationsMap[directive.name] = directive.locations;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  var _iterator2 = _createForOfIteratorHelper(astDefinitions),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var def = _step2.value;\n\n      if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        locationsMap[def.name.value] = def.locations.map(function (name) {\n          return name.value;\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return {\n    Directive: function Directive(node, _key, _parent, _path, ancestors) {\n      var name = node.name.value;\n      var locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(new GraphQLError(\"Unknown directive \\\"@\".concat(name, \"\\\".\"), {\n          nodes: node\n        }));\n        return;\n      }\n\n      var candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(new GraphQLError(\"Directive \\\"@\".concat(name, \"\\\" may not be used on \").concat(candidateLocation, \".\"), {\n          nodes: node\n        }));\n      }\n    }\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  var appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION:\n      {\n        var parentNode = ancestors[ancestors.length - 3];\n        'kind' in parentNode || invariant(false);\n        return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;\n      }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}","map":{"version":3,"sources":["C:/Users/15019/Book-Search/client/node_modules/graphql/validation/rules/KnownDirectivesRule.mjs"],"names":["inspect","invariant","GraphQLError","OperationTypeNode","DirectiveLocation","Kind","specifiedDirectives","KnownDirectivesRule","context","locationsMap","Object","create","schema","getSchema","definedDirectives","getDirectives","directive","name","locations","astDefinitions","getDocument","definitions","def","kind","DIRECTIVE_DEFINITION","value","map","Directive","node","_key","_parent","_path","ancestors","reportError","nodes","candidateLocation","getDirectiveLocationForASTPath","includes","appliedTo","length","OPERATION_DEFINITION","getDirectiveLocationForOperation","operation","FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE_DEFINITION","SCHEMA_DEFINITION","SCHEMA_EXTENSION","SCHEMA","SCALAR_TYPE_DEFINITION","SCALAR_TYPE_EXTENSION","SCALAR","OBJECT_TYPE_DEFINITION","OBJECT_TYPE_EXTENSION","OBJECT","FIELD_DEFINITION","INTERFACE_TYPE_DEFINITION","INTERFACE_TYPE_EXTENSION","INTERFACE","UNION_TYPE_DEFINITION","UNION_TYPE_EXTENSION","UNION","ENUM_TYPE_DEFINITION","ENUM_TYPE_EXTENSION","ENUM","ENUM_VALUE_DEFINITION","ENUM_VALUE","INPUT_OBJECT_TYPE_DEFINITION","INPUT_OBJECT_TYPE_EXTENSION","INPUT_OBJECT","INPUT_VALUE_DEFINITION","parentNode","INPUT_FIELD_DEFINITION","ARGUMENT_DEFINITION","QUERY","MUTATION","SUBSCRIPTION"],"mappings":"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","sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, {\n            nodes: node,\n          }),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}