{"ast":null,"code":"/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n * ```ts\n * import { parse } from 'graphql';\n * import { parse } from 'graphql/language';\n * ```\n *\n * @packageDocumentation\n */\n// The GraphQL.js version info.\nexport { version, versionInfo } from './version.mjs'; // The primary entry point into fulfilling a GraphQL request.\n\nexport { graphql, graphqlSync } from './graphql.mjs'; // Create and operate on GraphQL type definitions and schema.\n\nexport { resolveObjMapThunk, resolveReadonlyArrayThunk // Definitions\n, GraphQLSchema, GraphQLDirective, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull // Standard GraphQL Scalars\n, specifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID // Int boundaries constants\n, GRAPHQL_MAX_INT, GRAPHQL_MIN_INT // Built-in Directives defined by the Spec\n, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective // \"Enum\" of Type Kinds\n, TypeKind // Constant Deprecation Reason\n, DEFAULT_DEPRECATION_REASON // GraphQL Types for introspection.\n, introspectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind // Meta-field definitions.\n, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef // Predicates\n, isSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isRequiredArgument, isRequiredInputField, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective // Assertions\n, assertSchema, assertDirective, assertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType // Un-modifiers\n, getNullableType, getNamedType // Validate GraphQL schema.\n, validateSchema, assertValidSchema // Upholds the spec rules about naming.\n, assertName, assertEnumValueName } from './type/index.mjs'; // Parse and operate on GraphQL language source files.\n\nexport { Token, Source, Location, OperationTypeNode, getLocation // Print source location.\n, printLocation, printSourceLocation // Lex\n, Lexer, TokenKind // Parse\n, parse, parseValue, parseConstValue, parseType // Print\n, print // Visit\n, visit, visitInParallel, getVisitFn, getEnterLeaveForKind, BREAK, Kind, DirectiveLocation // Predicates\n, isDefinitionNode, isExecutableDefinitionNode, isSelectionNode, isValueNode, isConstValueNode, isTypeNode, isTypeSystemDefinitionNode, isTypeDefinitionNode, isTypeSystemExtensionNode, isTypeExtensionNode } from './language/index.mjs'; // Execute GraphQL queries.\n\nexport { execute, executeSync, defaultFieldResolver, defaultTypeResolver, responsePathAsArray, getArgumentValues, getVariableValues, getDirectiveValues, subscribe, createSourceEventStream } from './execution/index.mjs'; // Validate GraphQL documents.\n\nexport { validate, ValidationContext // All validation rules in the GraphQL Specification.\n, specifiedRules // Individual validation rules.\n, ExecutableDefinitionsRule, FieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedRequiredArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesInAllowedPositionRule // SDL-specific validation rules\n, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueArgumentDefinitionNamesRule, UniqueDirectiveNamesRule, PossibleTypeExtensionsRule // Custom validation rules\n, NoDeprecatedCustomRule, NoSchemaIntrospectionCustomRule } from './validation/index.mjs'; // Create, format, and print GraphQL errors.\n\nexport { GraphQLError, syntaxError, locatedError, printError, formatError } from './error/index.mjs'; // Utilities for operating on GraphQL type schema and parsed sources.\n\nexport { // Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery // Gets the target Operation from a Document.\n, getOperationAST // Gets the Type for the target Operation AST.\n, getOperationRootType // Convert a GraphQLSchema to an IntrospectionQuery.\n, introspectionFromSchema // Build a GraphQLSchema from an introspection result.\n, buildClientSchema // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\n, buildASTSchema // Build a GraphQLSchema from a GraphQL schema language document.\n, buildSchema // Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\n, extendSchema // Sort a GraphQLSchema.\n, lexicographicSortSchema // Print a GraphQLSchema to GraphQL Schema language.\n, printSchema // Print a GraphQLType to GraphQL Schema language.\n, printType // Prints the built-in introspection schema in the Schema Language format.\n, printIntrospectionSchema // Create a GraphQLType from a GraphQL language AST.\n, typeFromAST // Create a JavaScript value from a GraphQL language AST with a Type.\n, valueFromAST // Create a JavaScript value from a GraphQL language AST without a Type.\n, valueFromASTUntyped // Create a GraphQL language AST from a JavaScript value.\n, astFromValue // A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\n, TypeInfo, visitWithTypeInfo // Coerces a JavaScript value to a GraphQL type, or produces errors.\n, coerceInputValue // Concatenates multiple AST together.\n, concatAST // Separates an AST into an AST per Operation.\n, separateOperations // Strips characters that are not significant to the validity or execution of a GraphQL document.\n, stripIgnoredCharacters // Comparators for types\n, isEqualType, isTypeSubTypeOf, doTypesOverlap // Asserts a string is a valid GraphQL name.\n, assertValidName // Determine if a string is a valid GraphQL name.\n, isValidNameError // Compares two GraphQLSchemas and detects breaking changes.\n, BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges } from './utilities/index.mjs';","map":{"version":3,"sources":["C:/Users/15019/Book-Search/client/node_modules/graphql/index.mjs"],"names":["version","versionInfo","graphql","graphqlSync","resolveObjMapThunk","resolveReadonlyArrayThunk","GraphQLSchema","GraphQLDirective","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","GraphQLList","GraphQLNonNull","specifiedScalarTypes","GraphQLInt","GraphQLFloat","GraphQLString","GraphQLBoolean","GraphQLID","GRAPHQL_MAX_INT","GRAPHQL_MIN_INT","specifiedDirectives","GraphQLIncludeDirective","GraphQLSkipDirective","GraphQLDeprecatedDirective","GraphQLSpecifiedByDirective","TypeKind","DEFAULT_DEPRECATION_REASON","introspectionTypes","__Schema","__Directive","__DirectiveLocation","__Type","__Field","__InputValue","__EnumValue","__TypeKind","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","isSchema","isDirective","isType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","isInputType","isOutputType","isLeafType","isCompositeType","isAbstractType","isWrappingType","isNullableType","isNamedType","isRequiredArgument","isRequiredInputField","isSpecifiedScalarType","isIntrospectionType","isSpecifiedDirective","assertSchema","assertDirective","assertType","assertScalarType","assertObjectType","assertInterfaceType","assertUnionType","assertEnumType","assertInputObjectType","assertListType","assertNonNullType","assertInputType","assertOutputType","assertLeafType","assertCompositeType","assertAbstractType","assertWrappingType","assertNullableType","assertNamedType","getNullableType","getNamedType","validateSchema","assertValidSchema","assertName","assertEnumValueName","Token","Source","Location","OperationTypeNode","getLocation","printLocation","printSourceLocation","Lexer","TokenKind","parse","parseValue","parseConstValue","parseType","print","visit","visitInParallel","getVisitFn","getEnterLeaveForKind","BREAK","Kind","DirectiveLocation","isDefinitionNode","isExecutableDefinitionNode","isSelectionNode","isValueNode","isConstValueNode","isTypeNode","isTypeSystemDefinitionNode","isTypeDefinitionNode","isTypeSystemExtensionNode","isTypeExtensionNode","execute","executeSync","defaultFieldResolver","defaultTypeResolver","responsePathAsArray","getArgumentValues","getVariableValues","getDirectiveValues","subscribe","createSourceEventStream","validate","ValidationContext","specifiedRules","ExecutableDefinitionsRule","FieldsOnCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownArgumentNamesRule","KnownDirectivesRule","KnownFragmentNamesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","NoFragmentCyclesRule","NoUndefinedVariablesRule","NoUnusedFragmentsRule","NoUnusedVariablesRule","OverlappingFieldsCanBeMergedRule","PossibleFragmentSpreadsRule","ProvidedRequiredArgumentsRule","ScalarLeafsRule","SingleFieldSubscriptionsRule","UniqueArgumentNamesRule","UniqueDirectivesPerLocationRule","UniqueFragmentNamesRule","UniqueInputFieldNamesRule","UniqueOperationNamesRule","UniqueVariableNamesRule","ValuesOfCorrectTypeRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueArgumentDefinitionNamesRule","UniqueDirectiveNamesRule","PossibleTypeExtensionsRule","NoDeprecatedCustomRule","NoSchemaIntrospectionCustomRule","GraphQLError","syntaxError","locatedError","printError","formatError","getIntrospectionQuery","getOperationAST","getOperationRootType","introspectionFromSchema","buildClientSchema","buildASTSchema","buildSchema","extendSchema","lexicographicSortSchema","printSchema","printType","printIntrospectionSchema","typeFromAST","valueFromAST","valueFromASTUntyped","astFromValue","TypeInfo","visitWithTypeInfo","coerceInputValue","concatAST","separateOperations","stripIgnoredCharacters","isEqualType","isTypeSubTypeOf","doTypesOverlap","assertValidName","isValidNameError","BreakingChangeType","DangerousChangeType","findBreakingChanges","findDangerousChanges"],"mappings":"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","sourcesContent":["/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n * ```ts\n * import { parse } from 'graphql';\n * import { parse } from 'graphql/language';\n * ```\n *\n * @packageDocumentation\n */\n// The GraphQL.js version info.\nexport { version, versionInfo } from './version.mjs'; // The primary entry point into fulfilling a GraphQL request.\n\nexport { graphql, graphqlSync } from './graphql.mjs'; // Create and operate on GraphQL type definitions and schema.\n\nexport {\n  resolveObjMapThunk,\n  resolveReadonlyArrayThunk, // Definitions\n  GraphQLSchema,\n  GraphQLDirective,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull, // Standard GraphQL Scalars\n  specifiedScalarTypes,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID, // Int boundaries constants\n  GRAPHQL_MAX_INT,\n  GRAPHQL_MIN_INT, // Built-in Directives defined by the Spec\n  specifiedDirectives,\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective, // \"Enum\" of Type Kinds\n  TypeKind, // Constant Deprecation Reason\n  DEFAULT_DEPRECATION_REASON, // GraphQL Types for introspection.\n  introspectionTypes,\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind, // Meta-field definitions.\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef, // Predicates\n  isSchema,\n  isDirective,\n  isType,\n  isScalarType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isNonNullType,\n  isInputType,\n  isOutputType,\n  isLeafType,\n  isCompositeType,\n  isAbstractType,\n  isWrappingType,\n  isNullableType,\n  isNamedType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  isSpecifiedDirective, // Assertions\n  assertSchema,\n  assertDirective,\n  assertType,\n  assertScalarType,\n  assertObjectType,\n  assertInterfaceType,\n  assertUnionType,\n  assertEnumType,\n  assertInputObjectType,\n  assertListType,\n  assertNonNullType,\n  assertInputType,\n  assertOutputType,\n  assertLeafType,\n  assertCompositeType,\n  assertAbstractType,\n  assertWrappingType,\n  assertNullableType,\n  assertNamedType, // Un-modifiers\n  getNullableType,\n  getNamedType, // Validate GraphQL schema.\n  validateSchema,\n  assertValidSchema, // Upholds the spec rules about naming.\n  assertName,\n  assertEnumValueName,\n} from './type/index.mjs';\n// Parse and operate on GraphQL language source files.\nexport {\n  Token,\n  Source,\n  Location,\n  OperationTypeNode,\n  getLocation, // Print source location.\n  printLocation,\n  printSourceLocation, // Lex\n  Lexer,\n  TokenKind, // Parse\n  parse,\n  parseValue,\n  parseConstValue,\n  parseType, // Print\n  print, // Visit\n  visit,\n  visitInParallel,\n  getVisitFn,\n  getEnterLeaveForKind,\n  BREAK,\n  Kind,\n  DirectiveLocation, // Predicates\n  isDefinitionNode,\n  isExecutableDefinitionNode,\n  isSelectionNode,\n  isValueNode,\n  isConstValueNode,\n  isTypeNode,\n  isTypeSystemDefinitionNode,\n  isTypeDefinitionNode,\n  isTypeSystemExtensionNode,\n  isTypeExtensionNode,\n} from './language/index.mjs';\n// Execute GraphQL queries.\nexport {\n  execute,\n  executeSync,\n  defaultFieldResolver,\n  defaultTypeResolver,\n  responsePathAsArray,\n  getArgumentValues,\n  getVariableValues,\n  getDirectiveValues,\n  subscribe,\n  createSourceEventStream,\n} from './execution/index.mjs';\n// Validate GraphQL documents.\nexport {\n  validate,\n  ValidationContext, // All validation rules in the GraphQL Specification.\n  specifiedRules, // Individual validation rules.\n  ExecutableDefinitionsRule,\n  FieldsOnCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownArgumentNamesRule,\n  KnownDirectivesRule,\n  KnownFragmentNamesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  NoFragmentCyclesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedFragmentsRule,\n  NoUnusedVariablesRule,\n  OverlappingFieldsCanBeMergedRule,\n  PossibleFragmentSpreadsRule,\n  ProvidedRequiredArgumentsRule,\n  ScalarLeafsRule,\n  SingleFieldSubscriptionsRule,\n  UniqueArgumentNamesRule,\n  UniqueDirectivesPerLocationRule,\n  UniqueFragmentNamesRule,\n  UniqueInputFieldNamesRule,\n  UniqueOperationNamesRule,\n  UniqueVariableNamesRule,\n  ValuesOfCorrectTypeRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule, // SDL-specific validation rules\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  PossibleTypeExtensionsRule, // Custom validation rules\n  NoDeprecatedCustomRule,\n  NoSchemaIntrospectionCustomRule,\n} from './validation/index.mjs';\n// Create, format, and print GraphQL errors.\nexport {\n  GraphQLError,\n  syntaxError,\n  locatedError,\n  printError,\n  formatError,\n} from './error/index.mjs';\n// Utilities for operating on GraphQL type schema and parsed sources.\nexport {\n  // Produce the GraphQL query recommended for a full schema introspection.\n  // Accepts optional IntrospectionOptions.\n  getIntrospectionQuery, // Gets the target Operation from a Document.\n  getOperationAST, // Gets the Type for the target Operation AST.\n  getOperationRootType, // Convert a GraphQLSchema to an IntrospectionQuery.\n  introspectionFromSchema, // Build a GraphQLSchema from an introspection result.\n  buildClientSchema, // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\n  buildASTSchema, // Build a GraphQLSchema from a GraphQL schema language document.\n  buildSchema, // Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\n  extendSchema, // Sort a GraphQLSchema.\n  lexicographicSortSchema, // Print a GraphQLSchema to GraphQL Schema language.\n  printSchema, // Print a GraphQLType to GraphQL Schema language.\n  printType, // Prints the built-in introspection schema in the Schema Language format.\n  printIntrospectionSchema, // Create a GraphQLType from a GraphQL language AST.\n  typeFromAST, // Create a JavaScript value from a GraphQL language AST with a Type.\n  valueFromAST, // Create a JavaScript value from a GraphQL language AST without a Type.\n  valueFromASTUntyped, // Create a GraphQL language AST from a JavaScript value.\n  astFromValue, // A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\n  TypeInfo,\n  visitWithTypeInfo, // Coerces a JavaScript value to a GraphQL type, or produces errors.\n  coerceInputValue, // Concatenates multiple AST together.\n  concatAST, // Separates an AST into an AST per Operation.\n  separateOperations, // Strips characters that are not significant to the validity or execution of a GraphQL document.\n  stripIgnoredCharacters, // Comparators for types\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap, // Asserts a string is a valid GraphQL name.\n  assertValidName, // Determine if a string is a valid GraphQL name.\n  isValidNameError, // Compares two GraphQLSchemas and detects breaking changes.\n  BreakingChangeType,\n  DangerousChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n} from './utilities/index.mjs';\n"]},"metadata":{},"sourceType":"module"}