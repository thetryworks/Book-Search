{"ast":null,"code":"import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { getNamedType, getNullableType, isInputObjectType, isLeafType, isListType, isNonNullType, isRequiredInputField } from '../../type/definition.mjs';\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\n\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i = 0, _Object$values = Object.values(type.getFields()); _i < _Object$values.length; _i++) {\n        var fieldDef = _Object$values[_i];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(type.name, \".\").concat(fieldDef.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\"), {\n            nodes: node\n          }));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(\"Field \\\"\".concat(node.name.value, \"\\\" is not defined by type \\\"\").concat(parentType.name, \"\\\".\") + didYouMean(suggestions), {\n          nodes: node\n        }));\n      }\n    },\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(inspect(type), \"\\\", found \").concat(print(node), \".\"), {\n          nodes: node\n        }));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      return isValidValueNode(context, node);\n    },\n    IntValue: function IntValue(node) {\n      return isValidValueNode(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidValueNode(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidValueNode(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidValueNode(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    var typeStr = inspect(locationType);\n    context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(typeStr, \"\\\", found \").concat(print(node), \".\"), {\n      nodes: node\n    }));\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (parseResult === undefined) {\n      var _typeStr = inspect(locationType);\n\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr, \"\\\", found \").concat(print(node), \".\"), {\n        nodes: node\n      }));\n    }\n  } catch (error) {\n    var _typeStr2 = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(new GraphQLError(\"Expected value of type \\\"\".concat(_typeStr2, \"\\\", found \").concat(print(node), \"; \") + error.message, {\n        nodes: node,\n        originalError: error\n      }));\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/15019/Book-Search/client/node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs"],"names":["didYouMean","inspect","keyMap","suggestionList","GraphQLError","print","getNamedType","getNullableType","isInputObjectType","isLeafType","isListType","isNonNullType","isRequiredInputField","ValuesOfCorrectTypeRule","context","ListValue","node","type","getParentInputType","isValidValueNode","ObjectValue","getInputType","fieldNodeMap","fields","field","name","value","Object","values","getFields","fieldDef","fieldNode","typeStr","reportError","nodes","ObjectField","parentType","fieldType","suggestions","keys","NullValue","EnumValue","IntValue","FloatValue","StringValue","BooleanValue","locationType","parseResult","parseLiteral","undefined","error","message","originalError"],"mappings":"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","sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.mjs';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}