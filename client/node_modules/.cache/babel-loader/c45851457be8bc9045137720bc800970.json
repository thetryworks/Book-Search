{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\15019\\\\Book-Search\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isInputObjectType, isInterfaceType, isObjectType } from '../../type/definition.mjs';\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\n\nexport function UniqueFieldDefinitionNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n\n    var fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n    var fieldNames = knownFieldNames[typeName];\n\n    var _iterator = _createForOfIteratorHelper(fieldNodes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var fieldDef = _step.value;\n        var fieldName = fieldDef.name.value;\n\n        if (hasField(existingTypeMap[typeName], fieldName)) {\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), {\n            nodes: fieldDef.name\n          }));\n        } else if (fieldNames[fieldName]) {\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\"), {\n            nodes: [fieldNames[fieldName], fieldDef.name]\n          }));\n        } else {\n          fieldNames[fieldName] = fieldDef.name;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Users/15019/Book-Search/client/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"],"names":["GraphQLError","isInputObjectType","isInterfaceType","isObjectType","UniqueFieldDefinitionNamesRule","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownFieldNames","InputObjectTypeDefinition","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","node","_node$fields","typeName","name","value","fieldNodes","fields","fieldNames","fieldDef","fieldName","hasField","reportError","nodes","type","getFields"],"mappings":";AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SACEC,iBADF,EAEEC,eAFF,EAGEC,YAHF,QAIO,2BAJP;AAMA;;;;;;AAKA,OAAO,SAASC,8BAAT,CAAwCC,OAAxC,EAAiD;AACtD,MAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAf;AACA,MAAMC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAP,EAAH,GAAyBC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvD;AACA,MAAMC,eAAe,GAAGF,MAAM,CAACC,MAAP,CAAc,IAAd,CAAxB;AACA,SAAO;AACLE,IAAAA,yBAAyB,EAAEC,oBADtB;AAELC,IAAAA,wBAAwB,EAAED,oBAFrB;AAGLE,IAAAA,uBAAuB,EAAEF,oBAHpB;AAILG,IAAAA,sBAAsB,EAAEH,oBAJnB;AAKLI,IAAAA,oBAAoB,EAAEJ,oBALjB;AAMLK,IAAAA,mBAAmB,EAAEL;AANhB,GAAP;;AASA,WAASA,oBAAT,CAA8BM,IAA9B,EAAoC;AAClC,QAAIC,YAAJ;;AAEA,QAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAL,CAAUC,KAA3B;;AAEA,QAAI,CAACZ,eAAe,CAACU,QAAD,CAApB,EAAgC;AAC9BV,MAAAA,eAAe,CAACU,QAAD,CAAf,GAA4BZ,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;AACD,KAPiC,CAOhC;;AAEF;;;AAEA,QAAMc,UAAU,GACd,CAACJ,YAAY,GAAGD,IAAI,CAACM,MAArB,MAAiC,IAAjC,IAAyCL,YAAY,KAAK,KAAK,CAA/D,GACIA,YADJ,GAEI,EAHN;AAIA,QAAMM,UAAU,GAAGf,eAAe,CAACU,QAAD,CAAlC;;AAfkC,+CAiBXG,UAjBW;AAAA;;AAAA;AAiBlC,0DAAmC;AAAA,YAAxBG,QAAwB;AACjC,YAAMC,SAAS,GAAGD,QAAQ,CAACL,IAAT,CAAcC,KAAhC;;AAEA,YAAIM,QAAQ,CAACtB,eAAe,CAACc,QAAD,CAAhB,EAA4BO,SAA5B,CAAZ,EAAoD;AAClDxB,UAAAA,OAAO,CAAC0B,WAAR,CACE,IAAI/B,YAAJ,mBACYsB,QADZ,cACwBO,SADxB,yFAEE;AACEG,YAAAA,KAAK,EAAEJ,QAAQ,CAACL;AADlB,WAFF,CADF;AAQD,SATD,MASO,IAAII,UAAU,CAACE,SAAD,CAAd,EAA2B;AAChCxB,UAAAA,OAAO,CAAC0B,WAAR,CACE,IAAI/B,YAAJ,mBACYsB,QADZ,cACwBO,SADxB,mCAEE;AACEG,YAAAA,KAAK,EAAE,CAACL,UAAU,CAACE,SAAD,CAAX,EAAwBD,QAAQ,CAACL,IAAjC;AADT,WAFF,CADF;AAQD,SATM,MASA;AACLI,UAAAA,UAAU,CAACE,SAAD,CAAV,GAAwBD,QAAQ,CAACL,IAAjC;AACD;AACF;AAzCiC;AAAA;AAAA;AAAA;AAAA;;AA2ClC,WAAO,KAAP;AACD;AACF;;AAED,SAASO,QAAT,CAAkBG,IAAlB,EAAwBJ,SAAxB,EAAmC;AACjC,MAAI1B,YAAY,CAAC8B,IAAD,CAAZ,IAAsB/B,eAAe,CAAC+B,IAAD,CAArC,IAA+ChC,iBAAiB,CAACgC,IAAD,CAApE,EAA4E;AAC1E,WAAOA,IAAI,CAACC,SAAL,GAAiBL,SAAjB,KAA+B,IAAtC;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: fieldDef.name,\n            },\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            {\n              nodes: [fieldNames[fieldName], fieldDef.name],\n            },\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}